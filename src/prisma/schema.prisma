datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Artwork {
  id              String  @id @default(cuid())
  title           String?
  referenceNumber Int     @unique
  referenceCode   String?
  width           Int
  height          Int
  artistId        String
  colorId         String?
  finishId        String?
  formatId        String?
  styleId         String?
  supportId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images  Image[]
  artist  Artist   @relation(fields: [artistId], references: [id])
  color   Color?   @relation(fields: [colorId], references: [id])
  finish  Finish?  @relation(fields: [finishId], references: [id])
  format  Format?  @relation(fields: [formatId], references: [id])
  style   Style?   @relation(fields: [styleId], references: [id])
  support Support? @relation(fields: [supportId], references: [id])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artwork   Artwork @relation(fields: [artworkId], references: [id])
}

model Artist {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Finish {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Color {
  id        String    @id @default(cuid())
  name      String
  hex       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Style {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Format {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Support {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}
