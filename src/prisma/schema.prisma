datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  isAuthorized  Boolean   @default(false)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Artwork {
  id              String  @id @default(cuid())
  title           String?
  referenceNumber Int     @unique
  referenceCode   String?
  width           Int
  height          Int
  artistId        String
  finishId        String?
  formatId        String?
  styleId         String?
  supportId       String?
  tag             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  budgetItems BudgetItem[]
  colors      ArtworkColor[]
  images      ArtworkImage[]

  artist  Artist   @relation(fields: [artistId], references: [id])
  finish  Finish?  @relation(fields: [finishId], references: [id])
  format  Format?  @relation(fields: [formatId], references: [id])
  style   Style?   @relation(fields: [styleId], references: [id])
  support Support? @relation(fields: [supportId], references: [id])
}

model ArtworkColor {
  artworkId String
  colorId   String

  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  color   Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@id([artworkId, colorId])
}

model ArtworkImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

model Artist {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Finish {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Color {
  id        String         @id @default(cuid())
  name      String
  hex       String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  artworks  ArtworkColor[]
}

model Style {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Format {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Support {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  artworks  Artwork[]
}

model Frame {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  reference             String   @unique
  width                 Int?
  height                Int?
  galce                 Int?
  manufacturerReference String?
  manufacturerId        String?
  materialId            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  budgetItems BudgetItem[]
  images      FrameImage[]

  manufacturer Manufacturer? @relation(fields: [manufacturerId], references: [id])
  material     Material?     @relation(fields: [materialId], references: [id])
}

model FrameImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  frameId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
}

model Manufacturer {
  id        String   @id @default(cuid())
  name      String
  reference String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frames    Frame[]
}

model Material {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frames    Frame[]
}

model Client {
  id          String   @id @default(cuid())
  name        String
  legalName   String?
  email       String?
  phone       String?
  address     String?
  sendAddress String?
  cif         String?  @unique
  iban        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  budgets     Budget[]
  persons     Person[]
}

model Person {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model PricingItem {
  id        String   @id @default(cuid())
  width     Int
  height    Int
  price     Int
  pricingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pricing   Pricing  @relation(fields: [pricingId], references: [id], onDelete: Cascade)
}

model Pricing {
  id                 String        @id @default(cuid())
  name               String
  type               String        @default("artwork")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  pricingItems       PricingItem[]
  artworkBudgetItems BudgetItem[]  @relation(name: "ArtworkPricing")
  frameBudgetItems   BudgetItem[]  @relation(name: "FramePricing")
}

model Budget {
  id            String   @id @default(cuid())
  clientId      String
  date          String
  number        Int
  observations  String?
  reference     String?
  validity      String
  discount      Int
  transport     Int
  tax           Int
  paymentMethod String
  status        String
  sendAddress   String?
  showIBAN      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  client          Client           @relation(fields: [clientId], references: [id])
  budgetItems     BudgetItem[]
  budgetSignature BudgetSignature?
}

model BudgetItem {
  id               String   @id @default(cuid())
  artworkId        String
  artworkPrice     Int
  artworkPricingId String?
  frameId          String?
  framePrice       Int
  framePricingId   String?
  height           Int
  quantity         Int
  observations     String?
  width            Int
  budgetId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  artwork        Artwork  @relation(fields: [artworkId], references: [id])
  artworkPricing Pricing? @relation(name: "ArtworkPricing", fields: [artworkPricingId], references: [id])
  budget         Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  frame          Frame?   @relation(fields: [frameId], references: [id])
  framePricing   Pricing? @relation(name: "FramePricing", fields: [framePricingId], references: [id])
}

model BudgetSignature {
  id        String   @id @default(cuid())
  budgetId  String   @unique
  imageUrl  String
  publicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
}
